How to Make a Character for Strip Poker Night at the Inventory:

The game files can be found at: https://github.com/josephkantel/josephkantel.github.io

To make a character for SPNatI you need a set of images, and two .xml files, behaviour.xml and meta.xml.

The set of images are what the game shows the plater at various states of the game. meta.xml is the character's information on the character select screen, and behaviour.xml is what tells SPNatI what images and text to use during the game. You can check out the opponents folder in the game directory.

Each character's appearance and responses are divided into what are called "stages". The stages are numbered from 0 going up, and a character has one stage for each item of clothing they have, plus three nude stages. The first nude stage is when they have lost all their clothes, but are still in the poker game. The second nude stage is when a character has lost a final hand, and is now masturbating. The final stage is once a character has finished masturbating, and is just watching and waiting while the game ends. Each character has 2-8 pieces of clothing.

As an example, Elizabeth has 8 layers of clothing, and her stages are as follows:
 0 - fully clothed
 1 - lost her boots
 2 - lost her jacket
 3 - lost her skirt
 4 - lost her choker
 5 - lost her slip
 6 - lost her stockings
 7 - lost her corset (she's now topless)
 8 - lost her panties (she's now naked, but still in the game)
 9 - lost the game, and is now masturbating
10 - has finished masturbating

The other part of character behaviour is the situation that they are reacting to. These situations involve the state of the cards, losing a round and being forced to strip, other characters stripping, masturbating, and watching other characters masturbating. The full list of behaviours can be seen in the behaviour_template.txt file that comes with these instructions.

The images are split into stage and emotion by default. The default emotions for each stage are: awkward, calm, happy, horny, interested, loss, sad, shocked, and strip. Additional image names that are only used for a single stage: starting, heavy, finishing, finished. The default naming scheme for the images is <stage number>-<emotion>.png. You are not required to use the default images, you can use your own image names and/or not use the default emotions, just remember to have the behaviour.xml file use the correct image names (see below).

The behaviour.xml file contains information on the character's name, clothes, and a series of responses for each stage and situation. Each response includes the image to show for that character, stage, and situation, along with what the character says in that situation. It is possible for a character's behaviour.xml file to contain multiple responses for a particular stage/situation combination, in this case SPNatI will randomly pick one response each time it comes up, this allows for authors to include multiple responses for some variation throughout the game.


Making the XML Files:
In order to make creating a character's XML files easier, I've made a python script that automates most of writing the XML text, make_xml.py. You can get python from https://www.python.org/. When installing it, choose to add python to you computer's PATH. The script uses a database of responses written by the author - behaviour_template.txt is a template of responses for the author to fill in, and can be used as an example.

The first values are descriptions of the character, such as their name and gender, and are self-explanatory. The next set of values are the character's clothing. These entries tell the game what the character is taking off at each stage, how much skin it covers, and what part of the body the clothing covers. The number of entries here determines the total number of stages for that character. Remember that the characters should have 2-8 pieces of clothing, at least one "important" piece of clothing on each their upper and lower bodies.

After the clothing entries are the situation responses. These entries are in the form <situation>=<image>,<character text>.

The <situation> value can start with a positive number, a negative number, or no number, followed by the situation name.
If there is no number, that entry is considered a generic response and will be used for any stage and situation name combination that does not have a stage-specific entry.
If the situation value starts with a positive number, then the response will be used for that stage and situation combination.
If the situation value starts with a negative number, then the response will be used for the stage, counting back from the character's final stage. That is -1 refers to the stage where the character has finished, -2 is the stage where the character is masturbating, -3 is the stage where the character is naked, -4 is the stage where the character has only a single piece of clothing left, and so on.

For example:
good_hand=,"This is a good hand"
will be used for when the character when they have a good hand for any stage that doesn't have its own entry.

2-good_hand=,"I like this hand"
will be used when the character has a good hand in stage 2, where the character has lost 2 pieces of clothing.

-3-good_hand=,"This hand will stop me from losing the game this round"
will be used when the character has a good hand of cards while they are naked (and one round away from losing the poker game).

The <image> can be an emotion name (or any image filename that doesn't start with a digit, if you're using your own naming screen for images), it can start with a number, or it can be blank.
If the image entry is empty, then the script will use the default image emotion name for that situation, and will prepend the appropriate stage number onto the image name. This lets you use the default emotion, if you don't want to type it in yourself.
If the image name is just an emotion name (or your own filename) without starting with a number, then the script will use that emotion/filename, and again prepend the appropriate stage number onto the final image. This option lets you use your own emotions/filenames for a response, without needing you to include your own stage number.
If the image name starts with a number, then the script will include that specific image filename, and won't put add its own stage number. This lets you use a single, specific image for a response. You shouldn't use this setting for a stage-specific response.
If you're using a non-default image for a response, remember that you'll have to enter the image filename here in your response file.

In any case, don't put the .png on the end, as the script will add that automatically. The behaviour template includes the default emotions for the different situations.

For example:
good_hand=,"This is a good hand"
will use the default emotion for the situation, which in this case is "happy". It will also prepend the stage name, so if this entry is used for stage 0 (for example), the final image name will be "0-calm.png"

good_hand=interested,"This is a good hand"
will use the "interesting" emotion rather than the default emotion. Again, it will prepend the stage name, so if this entry is used for stage 0, the final image name will be "0-interested.png"

good_hand=3-calm,"This is a good hand"
will use the "3-calm.png" filename whenever this response is used, regardless of which stage it appears in, and regardless of what the default image emotion is.

The <character text> text is simply what the character says in that situation.

(For ease of use, if you want to use the default image emotion, and there are no commas in the character's text, then you can skip the comma that separates the image name and the character text. However, if you want to use your own image name and/or want to have a comma in their line, then you will need that first comma to separate the image name from the character text.)

You can have multiple entries for the same stage and situation. They will all be added to the behaviour.xml, so the character can have multiple responses to the same situation. You'll want to add multiple cases for the more common situations in particular.

Once you've prepared the character response file, you use the script by doing the following:
1) Open a command line in the directory of your character. You can open a command line by clicking on the start menu, and search for/run cmd.exe (depending on your operating system). Copy the directory of your character, then in the command line type:
cd
(for "change directory"), then right-click on the command line and paste in the directory you copied, and press enter.

2) type in:
python ..\make_xml.py <character response file> <behaviour.xml filename> <meta.xml filename>
from a command line. <character response file> is the filename of the file you've made, and <behaviour.xml filename> and <meta.xml filename> are the names where the behaviour.xml and meta.xml are written to. If you don't specify a behaviour filename and a meta filename, then the script will use the defaults, which is the names used by SPNatI.

Before writing a character, play the game a few times to see how it flows. In particular, play with Elizabeth and Wii Fit Trainer, as they have unique dialogue and it varies from one stage to the next. (Asuna, Lilith, and Laura all have generic dialogue, and Zoey has only partially unique dialogue.) You'll want to come up with a personality for your character think of how they would respond to the game's situations. Preferably it would match the source material for your character. And, of course, you should ensure that your character's statements match what their images show.


Making the Images:
The images for the game are made using K Kisekae 2 - http://pochi.lix.jp/k_kisekae2.html
You can save a model (select the model you want to save, click on the pencil and paper icon, then "export" to copy the save data).

I've made a script that automates making .png images from k kisekae 2 save data. This script takes a list of filenames and k kisekae 2 descriptions, and saves the descriptions to images that are properly centered & zoomed in.

In addition to python to run the script, you'll also need the Pillow library for python (https://pypi.python.org/pypi/Pillow/3.2.0, get the same version (32 bit or 64 bit) as your python installation, either https://pypi.python.org/packages/b4/68/7c982aa0c113ea52dbe638f68e6aa837cc707ef18761ac76c9436bdffc30/Pillow-3.2.0.win-amd64-py2.7.exe#md5=4d880cc917bfa06813704185391c98bf for 64-bit python or https://pypi.python.org/packages/bd/5d/ffb842a0d37798deaa87ebaa5c59aa0d392b28666c64e363b7fd962996eb/Pillow-3.2.0.win32-py2.7.exe#md5=66fb74a5e4950bb9ef0e58ca4503ff3b for 32-bit python)
and you'll need a special version of k kisekae 2: https://www.henthighschool.com/hhsplus/automatic-kisekae-2-generator/
You'll need to create an account to see the more recent files, which include patches that provide support for versions of kisekae greater than 33.
(Most of that program's automation features aren't relevant for SPNatI, but it still lets you automatically created images from descriptions.)

Make a file that has a list of:
<image filename>=<model description>
lines.

for example:
0-calm=33**aa7.94.1.0.54.7.94.1.42.50_ab32.42.56.0_ac_ba50_bb5.1_bc458.500.0.0.1_bd5_be180_ca66.0.12.90.8.25.21.0.0_cb0_daFAE6D4.0.0.100_db_dd0.3.34.50.45_dh1.20.50.50.3_di4_qa_qb_dc0.4.0.1.1_eh_ea8.F4DE9D.F4DE9D.B79562.0.0_ec16.30.F4DE9D.F4DE9D.B79562_ed15.100.1.1.F4DE9D.B79562_ef_eg_r619.F4DE9D.F4DE9D.56.0.2.100.59.98.563.589.0_r819.F4DE9D.B79562.56.0.2.100.100.100.582.550.0_r919.F4DE9D.B79562.56.0.2.50.50.86.588.580.0_fa2.50.50.56.55.42.56_fb00_fc2.6EF1FF.FFFFFF.2.6EF1FF.FFFFFF.40.17404A.17404A_fd8.0.24.F4DE9D.56_fe50.61_ff0000000000_fg1.50_t0_pa0.0.0.0.40.50.85.85.0.0_pb_pc_pd_pe_ga0_gb1_gc0.0_ge0000000000_gh_gf_gg_gd10000000_ha89.89_hb49.1.44.99_hc0.59.39.0.59.39_hd0.1.49.49_ia_ib_id_if3.87E6CC.C2F2E5.0.17.0.0.0.0.0.0.0.0_ic24.55.7296E4.AD1F4D.0_jc_ie_ja5.55.87E6CC.E5FAF4_jb5.55.87E6CC.E5FAF4_jd8.57.50.50_je8.57.50.50_jf_jg_ka37.CFF5EB.61.42_kb6.87E6CC.D1F6EC.87E6CC_kc_kd_ke_kf_la31.56.2.87E6CC.1_lb_oa_os_ob7.43.0.0_oc7.43.0.0_od_oe_of_lc_m218.CCF4E9.3.0.0.1.56.20.57.11.2.61_m318.C2F2E5.3.0.2.2.63.10.61.13.2.61_m413.D1F6EC.3.0.1.2.53.50.0.5.2.61_m523.56.3.0.1.2.26.20.0.4.2.61_m637.39.3.0.1.2.0.15.0.4.2.61_n0_s016.87E6CC.E0F9F2.87E6CC.0.100.140.604.161.0.4.0.100.2.61_s116.87E6CC.E5FAF4.87E6CC.0.87.51.499.195.1.4.0.87.2.61_s216.87E6CC.E5FAF4.87E6CC.0.100.47.458.535.1.4.0.88.2.61_og6.87E6CC.DCF2EA.87E6CC_oh6.87E6CC.DCF2EA.87E6CC_oo_op_oq_or_om1.87E6CC.87E6CC.0_on1.87E6CC.87E6CC.0_ok_ol_oi_oj_ad0.0.0.0.0.0.0.0.0.0
will take a description of Rosalina, and save it to a file named 0-calm.png
Don't include the .png extension in the descriptions, the script will add it.

Some information about stages and actions: Certain pairs of actions occur one after the other, but in different stages. Most notably, the "strip" event occurs in the stage when they're still wearing the clothing in question, while "stripped" events occur in the next stage. For example, when a character removes their first piece of clothing, the events will be "0-strip" followed by "1-stripped". Likewise, The masturbation events are split across multiple stages. The "starting" event takes place in the character-is-naked stage, the masturbating, heavy masturbating, and finishing events occur in the masturbation stage, while the "finished" event occurs in the finished stage. This information will help you assign your images to the correct stages.

In order to make the images, first start kkl.exe in the 1.1e_bundle\Autocutter\FlashProcessor directory inside the automatic kisekae 2 download. Make sure you don't have any menus open (especially the import and export menus), otherwise they'll show up in the images.

The usage of the script is as follows:
1)Open a windows console in the directory of your character, as with the xml script above.

2) Type in:
python ..\make_images.py <image description file> <output folder>
where <image description file> is your list of filenames and descriptions, and <output folder> is the folder where all the images will be saved to. If you leave the output folder empty, the script will use the current folder as the output location. You can also enter "." (without the quotes) to use the current directory as the output directory.

Note that this can take a while, 2-5 seconds per image. If the program hangs, or doesn't seem to be processing images, it's possible that you have an error in your image descriptions. Also try going to the folder "%appdata%\kkl\Local Store" (copy and paste that into your file explorer, without the quotes), and delete any text files there. The conversion program will stop if it encounters a file that it can't convert into an image, even if the other image descriptions are fine.

(As an implementation notice, note that this saves descriptions to the kkl folder in your appdata (%appdata%\kkl\Local Store). The description files are saved their, and the images are copied from that folder. So if you've got any files there from using the automated kisekae 2 program, this script will overwrite them.)

Some tips and things that might not be apparent from using kisekae:
*The "love juice" setting can't be changed using the control panel, only by "interacting" with the characters, or by loading save data. In order to change the level to what you want, first export your current character, and uncheck every option except the gender symbol. Copy the text that you see, it should be something like "33**qa_qb_dc0.1.2.1.1_eh1.865A2F" if you only have the gender value selected. Go back into the import screen, paste in what you copied, but change the first number after "dc" and before the . to the number that you want. It goes from 0-100 for zero-maximum love juice level. For example, change that string to "33**qa_qb_dc75.1.2.1.1_eh1.865A2F" to set the love juice level to 75%.

*Many shirts, some jackets, and some neckties can be opened. This can't be done using the control panel, only by clicking on their clothes. Many jackets can be opened. Shirts with buttons can be unbuttoned one button at a time, from both the top and the bottom (depending on where you click). Neckties can be loosened by opening the top button of the character's shirt. If you open them too far, hide the clothing in question, then make it visible again. This will reset the clothing so you can unbutton/open it again.

*Minor note, but sometimes animations play (such as when a character has a high arousal level - the bottom left slider under the heart icon, or characters with love juice dripping), and I have no idea how to make them happen or not happen. Usually it doesn't matter, but I still don't know how to control it.

Also, look at the images and description save files in the "saves" directory in the SPNatI folder for some examples of character models, emotions, and poses.

A final reminder that you don't have to use the default set of emotions (or image filenames). If you look in each character's opponents folder, you can see that each character has different emotion types. You can have as many different types of images or responses as you want, as many as one image per response if you want to make them all.

Adding a character to the game:
Now that you have you images and xml files, you just need to add them to the game.
Make a folder in the "opponents" folder inside the game directory named after your character. Put your images and xml files inside that folder. Then, edit the listing.xml file opponents directory by adding the line: <opponent>folder_name/</opponent> to the list of opponent entries.
Now you can run the game through the index.html file in the SPNatI directory, and enjoy your new character. And test what you wrote.

Though if you're making a character, you'll probably start by making some starter images and mostly default behaviour.xml contents, then testing what you have. And then iterating between updating your character information, and playing the game to see if your changes are what you wanted.